package com.bcm.messenger.common.ui.activity

import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.bcm.messenger.common.ARouterConstants
import com.bcm.messenger.common.AccountContext
import com.bcm.messenger.common.R
import com.bcm.messenger.common.database.migrate.DatabaseMigration
import com.bcm.messenger.common.database.migrate.IDatabaseMigration
import com.bcm.messenger.common.preferences.TextSecurePreferences
import com.bcm.messenger.common.provider.AMELogin
import com.bcm.messenger.common.provider.AmeModuleCenter
import com.bcm.messenger.common.utils.setStatusBarLightMode
import com.bcm.messenger.common.utils.startBcmActivity
import com.bcm.messenger.utility.dispatcher.AmeDispatcher
import com.bcm.messenger.utility.logger.ALog
import com.bcm.route.api.BcmRouter
import io.reactivex.Observable
import io.reactivex.android.schedulers.AndroidSchedulers
import kotlinx.android.synthetic.main.activity_database_migrate.*

/**
 * DO NOT EDIT THIS FILE IF FUNCTIONS WORK NORMALLY!!
 *
 * Created by Kin on 2019/9/27
 */
class DatabaseMigrateActivity : AppCompatActivity() {
    companion object {
        const val IS_LOGIN_PROGRESS = "login_progress"
        private const val TAG = "DatabaseMigrateActivity"
    }

    private var isLoginProgress = false
    private lateinit var accountContext: AccountContext

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_database_migrate)

        isLoginProgress = intent.getBooleanExtra(IS_LOGIN_PROGRESS, false)

        //todo wangshuhe
        accountContext = intent.getSerializableExtra(ARouterConstants.Account.ACCOUNT_CONTEXT) as AccountContext

        startMigrate(accountContext)
    }

    private fun startMigrate(accountContext: AccountContext) {
        window.setStatusBarLightMode()

        ALog.i(TAG, "delay for waiting db init")

        migrate_progress_text.text = String.format("%d%%", 0)
        AmeDispatcher.mainThread.dispatch({
            migrate(accountContext)
        }, 5000)
    }

    private fun migrate(accountContext: AccountContext) {
        ALog.i(TAG, "Start migrate")

        val migration: IDatabaseMigration = DatabaseMigration
        migration.doMigrate(accountContext) {
            if (it < 0) {
                ALog.i(TAG, "Migrate failed")
                migrate_progress_text.text = getString(R.string.common_database_migrate_failed)
                migrate_loading.stopAnim()
                migrate_loading.visibility = View.INVISIBLE
                if (it == -2) {
                    doForAlwaysFailed(accountContext)
                }
                return@doMigrate
            }

            migrate_progress_text.text = String.format("%d%%", (it.toFloat() / 22f * 100).toInt())

            if (it == 22) {
                migrateFinish(accountContext)
            }
        }
    }

    private fun migrateFinish(accountContext: AccountContext, isFailed: Boolean = false) {
        ALog.i(TAG, "Migrate finish")
        migrate_loading.stopAnim()
        migrate_loading.visibility = View.INVISIBLE

        val login = AmeModuleCenter.login()
        if (isLoginProgress) {
            ALog.i(TAG, "Continue login progress")
            migrate_progress_text.text = getString(R.string.common_database_migrate_finish_login)
            Observable.create<Unit> {
                login.continueLoginSuccess(accountContext)
                it.onNext(Unit)
                it.onComplete()
            }.subscribeOn(AmeDispatcher.singleScheduler)
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe({
                        doOtherInit(isFailed)
                    }, {
                        login.quit(accountContext,false)
                        finish()
                    })
        } else {
            ALog.i(TAG, "Continue going to home")
            doOtherInit(isFailed)
        }
    }

    private fun doOtherInit(isFailed: Boolean) {
        TextSecurePreferences.setHasDatabaseMigrated(accountContext)
        if (!isFailed) {
            TextSecurePreferences.setMigrateFailedCount(accountContext, 0)
        }

        AmeModuleCenter.onLoginSucceed(accountContext)

        val migration: IDatabaseMigration = DatabaseMigration
        migration.clearFlag()

        BcmRouter.getInstance().get(ARouterConstants.Activity.APP_HOME_PATH).startBcmActivity(AMELogin.majorContext)
        finish()
    }

    private fun doForAlwaysFailed(accountContext: AccountContext) {
        ALog.i(TAG, "Migrate failed for 3 times.")
        AlertDialog.Builder(this)
                .setTitle(R.string.common_database_migrate_failed)
                .setMessage(R.string.common_database_migrate_failed_content)
                .setPositiveButton(R.string.common_confirm_ok_text) { _, _ ->
                    AmeDispatcher.io.dispatch {
                        val contactProvider = AmeModuleCenter.contact(accountContext)
                        contactProvider?.doForLogOut()
                        contactProvider?.doForLogin()

                        AmeDispatcher.mainThread.dispatch {
                            migrateFinish(accountContext,true)
                        }
                    }
                }
                .show()
    }

    override fun onBackPressed() {
        // Cannot press back
    }
}