// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group_key_exchange.proto

package com.bcm.messenger.chats.group.logic.secure;

public final class GroupKeyExchange {
  private GroupKeyExchange() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface StrongKeyParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:secure.StrongKeyParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *我的signed prekey id 
     * </pre>
     *
     * <code>int32 signedPrekeyId = 1;</code>
     */
    int getSignedPrekeyId();

    /**
     * <pre>
     *我的prekey id 
     * </pre>
     *
     * <code>int32 prekeyId = 2;</code>
     */
    int getPrekeyId();

    /**
     * <pre>
     *密钥变更操作者的uid
     * </pre>
     *
     * <code>string aliceUid = 3;</code>
     */
    String getAliceUid();
    /**
     * <pre>
     *密钥变更操作者的uid
     * </pre>
     *
     * <code>string aliceUid = 3;</code>
     */
    com.google.protobuf.ByteString
        getAliceUidBytes();

    /**
     * <pre>
     *用于x3dh的临时公钥
     * </pre>
     *
     * <code>bytes basePublicKey = 4;</code>
     */
    com.google.protobuf.ByteString getBasePublicKey();

    /**
     * <pre>
     *密钥变更操作者的公钥=
     * </pre>
     *
     * <code>bytes alicePublickey = 5;</code>
     */
    com.google.protobuf.ByteString getAlicePublickey();

    /**
     * <pre>
     *加密后的群密码
     * </pre>
     *
     * <code>bytes encyptedGroupKey = 6;</code>
     */
    com.google.protobuf.ByteString getEncyptedGroupKey();

    /**
     * <pre>
     *sign(群密钥明文, 群密码派生的密钥对的私钥)
     * </pre>
     *
     * <code>bytes signature = 7;</code>
     */
    com.google.protobuf.ByteString getSignature();
  }
  /**
   * Protobuf type {@code secure.StrongKeyParams}
   */
  public  static final class StrongKeyParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:secure.StrongKeyParams)
      StrongKeyParamsOrBuilder {
    // Use StrongKeyParams.newBuilder() to construct.
    private StrongKeyParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StrongKeyParams() {
      signedPrekeyId_ = 0;
      prekeyId_ = 0;
      aliceUid_ = "";
      basePublicKey_ = com.google.protobuf.ByteString.EMPTY;
      alicePublickey_ = com.google.protobuf.ByteString.EMPTY;
      encyptedGroupKey_ = com.google.protobuf.ByteString.EMPTY;
      signature_ = com.google.protobuf.ByteString.EMPTY;
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private StrongKeyParams(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              signedPrekeyId_ = input.readInt32();
              break;
            }
            case 16: {

              prekeyId_ = input.readInt32();
              break;
            }
            case 26: {
              String s = input.readStringRequireUtf8();

              aliceUid_ = s;
              break;
            }
            case 34: {

              basePublicKey_ = input.readBytes();
              break;
            }
            case 42: {

              alicePublickey_ = input.readBytes();
              break;
            }
            case 50: {

              encyptedGroupKey_ = input.readBytes();
              break;
            }
            case 58: {

              signature_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return GroupKeyExchange.internal_static_secure_StrongKeyParams_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return GroupKeyExchange.internal_static_secure_StrongKeyParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              StrongKeyParams.class, Builder.class);
    }

    public static final int SIGNEDPREKEYID_FIELD_NUMBER = 1;
    private int signedPrekeyId_;
    /**
     * <pre>
     *我的signed prekey id 
     * </pre>
     *
     * <code>int32 signedPrekeyId = 1;</code>
     */
    public int getSignedPrekeyId() {
      return signedPrekeyId_;
    }

    public static final int PREKEYID_FIELD_NUMBER = 2;
    private int prekeyId_;
    /**
     * <pre>
     *我的prekey id 
     * </pre>
     *
     * <code>int32 prekeyId = 2;</code>
     */
    public int getPrekeyId() {
      return prekeyId_;
    }

    public static final int ALICEUID_FIELD_NUMBER = 3;
    private volatile Object aliceUid_;
    /**
     * <pre>
     *密钥变更操作者的uid
     * </pre>
     *
     * <code>string aliceUid = 3;</code>
     */
    public String getAliceUid() {
      Object ref = aliceUid_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        aliceUid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *密钥变更操作者的uid
     * </pre>
     *
     * <code>string aliceUid = 3;</code>
     */
    public com.google.protobuf.ByteString
        getAliceUidBytes() {
      Object ref = aliceUid_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        aliceUid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BASEPUBLICKEY_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString basePublicKey_;
    /**
     * <pre>
     *用于x3dh的临时公钥
     * </pre>
     *
     * <code>bytes basePublicKey = 4;</code>
     */
    public com.google.protobuf.ByteString getBasePublicKey() {
      return basePublicKey_;
    }

    public static final int ALICEPUBLICKEY_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString alicePublickey_;
    /**
     * <pre>
     *密钥变更操作者的公钥=
     * </pre>
     *
     * <code>bytes alicePublickey = 5;</code>
     */
    public com.google.protobuf.ByteString getAlicePublickey() {
      return alicePublickey_;
    }

    public static final int ENCYPTEDGROUPKEY_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString encyptedGroupKey_;
    /**
     * <pre>
     *加密后的群密码
     * </pre>
     *
     * <code>bytes encyptedGroupKey = 6;</code>
     */
    public com.google.protobuf.ByteString getEncyptedGroupKey() {
      return encyptedGroupKey_;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString signature_;
    /**
     * <pre>
     *sign(群密钥明文, 群密码派生的密钥对的私钥)
     * </pre>
     *
     * <code>bytes signature = 7;</code>
     */
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (signedPrekeyId_ != 0) {
        output.writeInt32(1, signedPrekeyId_);
      }
      if (prekeyId_ != 0) {
        output.writeInt32(2, prekeyId_);
      }
      if (!getAliceUidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, aliceUid_);
      }
      if (!basePublicKey_.isEmpty()) {
        output.writeBytes(4, basePublicKey_);
      }
      if (!alicePublickey_.isEmpty()) {
        output.writeBytes(5, alicePublickey_);
      }
      if (!encyptedGroupKey_.isEmpty()) {
        output.writeBytes(6, encyptedGroupKey_);
      }
      if (!signature_.isEmpty()) {
        output.writeBytes(7, signature_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (signedPrekeyId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, signedPrekeyId_);
      }
      if (prekeyId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, prekeyId_);
      }
      if (!getAliceUidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, aliceUid_);
      }
      if (!basePublicKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, basePublicKey_);
      }
      if (!alicePublickey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, alicePublickey_);
      }
      if (!encyptedGroupKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, encyptedGroupKey_);
      }
      if (!signature_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, signature_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof StrongKeyParams)) {
        return super.equals(obj);
      }
      StrongKeyParams other = (StrongKeyParams) obj;

      boolean result = true;
      result = result && (getSignedPrekeyId()
          == other.getSignedPrekeyId());
      result = result && (getPrekeyId()
          == other.getPrekeyId());
      result = result && getAliceUid()
          .equals(other.getAliceUid());
      result = result && getBasePublicKey()
          .equals(other.getBasePublicKey());
      result = result && getAlicePublickey()
          .equals(other.getAlicePublickey());
      result = result && getEncyptedGroupKey()
          .equals(other.getEncyptedGroupKey());
      result = result && getSignature()
          .equals(other.getSignature());
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SIGNEDPREKEYID_FIELD_NUMBER;
      hash = (53 * hash) + getSignedPrekeyId();
      hash = (37 * hash) + PREKEYID_FIELD_NUMBER;
      hash = (53 * hash) + getPrekeyId();
      hash = (37 * hash) + ALICEUID_FIELD_NUMBER;
      hash = (53 * hash) + getAliceUid().hashCode();
      hash = (37 * hash) + BASEPUBLICKEY_FIELD_NUMBER;
      hash = (53 * hash) + getBasePublicKey().hashCode();
      hash = (37 * hash) + ALICEPUBLICKEY_FIELD_NUMBER;
      hash = (53 * hash) + getAlicePublickey().hashCode();
      hash = (37 * hash) + ENCYPTEDGROUPKEY_FIELD_NUMBER;
      hash = (53 * hash) + getEncyptedGroupKey().hashCode();
      hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
      hash = (53 * hash) + getSignature().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static StrongKeyParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static StrongKeyParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static StrongKeyParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static StrongKeyParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static StrongKeyParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static StrongKeyParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static StrongKeyParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static StrongKeyParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static StrongKeyParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static StrongKeyParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(StrongKeyParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code secure.StrongKeyParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:secure.StrongKeyParams)
        StrongKeyParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return GroupKeyExchange.internal_static_secure_StrongKeyParams_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return GroupKeyExchange.internal_static_secure_StrongKeyParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                StrongKeyParams.class, Builder.class);
      }

      // Construct using com.bcm.messenger.chats.group.logic.secure.GroupKeyExchange.StrongKeyParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        signedPrekeyId_ = 0;

        prekeyId_ = 0;

        aliceUid_ = "";

        basePublicKey_ = com.google.protobuf.ByteString.EMPTY;

        alicePublickey_ = com.google.protobuf.ByteString.EMPTY;

        encyptedGroupKey_ = com.google.protobuf.ByteString.EMPTY;

        signature_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return GroupKeyExchange.internal_static_secure_StrongKeyParams_descriptor;
      }

      public StrongKeyParams getDefaultInstanceForType() {
        return StrongKeyParams.getDefaultInstance();
      }

      public StrongKeyParams build() {
        StrongKeyParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public StrongKeyParams buildPartial() {
        StrongKeyParams result = new StrongKeyParams(this);
        result.signedPrekeyId_ = signedPrekeyId_;
        result.prekeyId_ = prekeyId_;
        result.aliceUid_ = aliceUid_;
        result.basePublicKey_ = basePublicKey_;
        result.alicePublickey_ = alicePublickey_;
        result.encyptedGroupKey_ = encyptedGroupKey_;
        result.signature_ = signature_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof StrongKeyParams) {
          return mergeFrom((StrongKeyParams)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(StrongKeyParams other) {
        if (other == StrongKeyParams.getDefaultInstance()) return this;
        if (other.getSignedPrekeyId() != 0) {
          setSignedPrekeyId(other.getSignedPrekeyId());
        }
        if (other.getPrekeyId() != 0) {
          setPrekeyId(other.getPrekeyId());
        }
        if (!other.getAliceUid().isEmpty()) {
          aliceUid_ = other.aliceUid_;
          onChanged();
        }
        if (other.getBasePublicKey() != com.google.protobuf.ByteString.EMPTY) {
          setBasePublicKey(other.getBasePublicKey());
        }
        if (other.getAlicePublickey() != com.google.protobuf.ByteString.EMPTY) {
          setAlicePublickey(other.getAlicePublickey());
        }
        if (other.getEncyptedGroupKey() != com.google.protobuf.ByteString.EMPTY) {
          setEncyptedGroupKey(other.getEncyptedGroupKey());
        }
        if (other.getSignature() != com.google.protobuf.ByteString.EMPTY) {
          setSignature(other.getSignature());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        StrongKeyParams parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (StrongKeyParams) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int signedPrekeyId_ ;
      /**
       * <pre>
       *我的signed prekey id 
       * </pre>
       *
       * <code>int32 signedPrekeyId = 1;</code>
       */
      public int getSignedPrekeyId() {
        return signedPrekeyId_;
      }
      /**
       * <pre>
       *我的signed prekey id 
       * </pre>
       *
       * <code>int32 signedPrekeyId = 1;</code>
       */
      public Builder setSignedPrekeyId(int value) {
        
        signedPrekeyId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *我的signed prekey id 
       * </pre>
       *
       * <code>int32 signedPrekeyId = 1;</code>
       */
      public Builder clearSignedPrekeyId() {
        
        signedPrekeyId_ = 0;
        onChanged();
        return this;
      }

      private int prekeyId_ ;
      /**
       * <pre>
       *我的prekey id 
       * </pre>
       *
       * <code>int32 prekeyId = 2;</code>
       */
      public int getPrekeyId() {
        return prekeyId_;
      }
      /**
       * <pre>
       *我的prekey id 
       * </pre>
       *
       * <code>int32 prekeyId = 2;</code>
       */
      public Builder setPrekeyId(int value) {
        
        prekeyId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *我的prekey id 
       * </pre>
       *
       * <code>int32 prekeyId = 2;</code>
       */
      public Builder clearPrekeyId() {
        
        prekeyId_ = 0;
        onChanged();
        return this;
      }

      private Object aliceUid_ = "";
      /**
       * <pre>
       *密钥变更操作者的uid
       * </pre>
       *
       * <code>string aliceUid = 3;</code>
       */
      public String getAliceUid() {
        Object ref = aliceUid_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          aliceUid_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       *密钥变更操作者的uid
       * </pre>
       *
       * <code>string aliceUid = 3;</code>
       */
      public com.google.protobuf.ByteString
          getAliceUidBytes() {
        Object ref = aliceUid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          aliceUid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *密钥变更操作者的uid
       * </pre>
       *
       * <code>string aliceUid = 3;</code>
       */
      public Builder setAliceUid(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        aliceUid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *密钥变更操作者的uid
       * </pre>
       *
       * <code>string aliceUid = 3;</code>
       */
      public Builder clearAliceUid() {
        
        aliceUid_ = getDefaultInstance().getAliceUid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *密钥变更操作者的uid
       * </pre>
       *
       * <code>string aliceUid = 3;</code>
       */
      public Builder setAliceUidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        aliceUid_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString basePublicKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       *用于x3dh的临时公钥
       * </pre>
       *
       * <code>bytes basePublicKey = 4;</code>
       */
      public com.google.protobuf.ByteString getBasePublicKey() {
        return basePublicKey_;
      }
      /**
       * <pre>
       *用于x3dh的临时公钥
       * </pre>
       *
       * <code>bytes basePublicKey = 4;</code>
       */
      public Builder setBasePublicKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        basePublicKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *用于x3dh的临时公钥
       * </pre>
       *
       * <code>bytes basePublicKey = 4;</code>
       */
      public Builder clearBasePublicKey() {
        
        basePublicKey_ = getDefaultInstance().getBasePublicKey();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString alicePublickey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       *密钥变更操作者的公钥=
       * </pre>
       *
       * <code>bytes alicePublickey = 5;</code>
       */
      public com.google.protobuf.ByteString getAlicePublickey() {
        return alicePublickey_;
      }
      /**
       * <pre>
       *密钥变更操作者的公钥=
       * </pre>
       *
       * <code>bytes alicePublickey = 5;</code>
       */
      public Builder setAlicePublickey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        alicePublickey_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *密钥变更操作者的公钥=
       * </pre>
       *
       * <code>bytes alicePublickey = 5;</code>
       */
      public Builder clearAlicePublickey() {
        
        alicePublickey_ = getDefaultInstance().getAlicePublickey();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString encyptedGroupKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       *加密后的群密码
       * </pre>
       *
       * <code>bytes encyptedGroupKey = 6;</code>
       */
      public com.google.protobuf.ByteString getEncyptedGroupKey() {
        return encyptedGroupKey_;
      }
      /**
       * <pre>
       *加密后的群密码
       * </pre>
       *
       * <code>bytes encyptedGroupKey = 6;</code>
       */
      public Builder setEncyptedGroupKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        encyptedGroupKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *加密后的群密码
       * </pre>
       *
       * <code>bytes encyptedGroupKey = 6;</code>
       */
      public Builder clearEncyptedGroupKey() {
        
        encyptedGroupKey_ = getDefaultInstance().getEncyptedGroupKey();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       *sign(群密钥明文, 群密码派生的密钥对的私钥)
       * </pre>
       *
       * <code>bytes signature = 7;</code>
       */
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <pre>
       *sign(群密钥明文, 群密码派生的密钥对的私钥)
       * </pre>
       *
       * <code>bytes signature = 7;</code>
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        signature_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *sign(群密钥明文, 群密码派生的密钥对的私钥)
       * </pre>
       *
       * <code>bytes signature = 7;</code>
       */
      public Builder clearSignature() {
        
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:secure.StrongKeyParams)
    }

    // @@protoc_insertion_point(class_scope:secure.StrongKeyParams)
    private static final StrongKeyParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new StrongKeyParams();
    }

    public static StrongKeyParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StrongKeyParams>
        PARSER = new com.google.protobuf.AbstractParser<StrongKeyParams>() {
      public StrongKeyParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StrongKeyParams(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StrongKeyParams> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<StrongKeyParams> getParserForType() {
      return PARSER;
    }

    public StrongKeyParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NormalKeyParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:secure.NormalKeyParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *加密后的群密码
     * </pre>
     *
     * <code>bytes encyptedGroupKey = 1;</code>
     */
    com.google.protobuf.ByteString getEncyptedGroupKey();

    /**
     * <pre>
     *sign(群密钥明文, 群密码派生的密钥对的私钥)
     * </pre>
     *
     * <code>bytes signature = 2;</code>
     */
    com.google.protobuf.ByteString getSignature();
  }
  /**
   * Protobuf type {@code secure.NormalKeyParams}
   */
  public  static final class NormalKeyParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:secure.NormalKeyParams)
      NormalKeyParamsOrBuilder {
    // Use NormalKeyParams.newBuilder() to construct.
    private NormalKeyParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NormalKeyParams() {
      encyptedGroupKey_ = com.google.protobuf.ByteString.EMPTY;
      signature_ = com.google.protobuf.ByteString.EMPTY;
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private NormalKeyParams(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {

              encyptedGroupKey_ = input.readBytes();
              break;
            }
            case 18: {

              signature_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return GroupKeyExchange.internal_static_secure_NormalKeyParams_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return GroupKeyExchange.internal_static_secure_NormalKeyParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              NormalKeyParams.class, Builder.class);
    }

    public static final int ENCYPTEDGROUPKEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString encyptedGroupKey_;
    /**
     * <pre>
     *加密后的群密码
     * </pre>
     *
     * <code>bytes encyptedGroupKey = 1;</code>
     */
    public com.google.protobuf.ByteString getEncyptedGroupKey() {
      return encyptedGroupKey_;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString signature_;
    /**
     * <pre>
     *sign(群密钥明文, 群密码派生的密钥对的私钥)
     * </pre>
     *
     * <code>bytes signature = 2;</code>
     */
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!encyptedGroupKey_.isEmpty()) {
        output.writeBytes(1, encyptedGroupKey_);
      }
      if (!signature_.isEmpty()) {
        output.writeBytes(2, signature_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!encyptedGroupKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, encyptedGroupKey_);
      }
      if (!signature_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, signature_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof NormalKeyParams)) {
        return super.equals(obj);
      }
      NormalKeyParams other = (NormalKeyParams) obj;

      boolean result = true;
      result = result && getEncyptedGroupKey()
          .equals(other.getEncyptedGroupKey());
      result = result && getSignature()
          .equals(other.getSignature());
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ENCYPTEDGROUPKEY_FIELD_NUMBER;
      hash = (53 * hash) + getEncyptedGroupKey().hashCode();
      hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
      hash = (53 * hash) + getSignature().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static NormalKeyParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static NormalKeyParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static NormalKeyParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static NormalKeyParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static NormalKeyParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static NormalKeyParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static NormalKeyParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static NormalKeyParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static NormalKeyParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static NormalKeyParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(NormalKeyParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code secure.NormalKeyParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:secure.NormalKeyParams)
        NormalKeyParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return GroupKeyExchange.internal_static_secure_NormalKeyParams_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return GroupKeyExchange.internal_static_secure_NormalKeyParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                NormalKeyParams.class, Builder.class);
      }

      // Construct using com.bcm.messenger.chats.group.logic.secure.GroupKeyExchange.NormalKeyParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        encyptedGroupKey_ = com.google.protobuf.ByteString.EMPTY;

        signature_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return GroupKeyExchange.internal_static_secure_NormalKeyParams_descriptor;
      }

      public NormalKeyParams getDefaultInstanceForType() {
        return NormalKeyParams.getDefaultInstance();
      }

      public NormalKeyParams build() {
        NormalKeyParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public NormalKeyParams buildPartial() {
        NormalKeyParams result = new NormalKeyParams(this);
        result.encyptedGroupKey_ = encyptedGroupKey_;
        result.signature_ = signature_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof NormalKeyParams) {
          return mergeFrom((NormalKeyParams)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(NormalKeyParams other) {
        if (other == NormalKeyParams.getDefaultInstance()) return this;
        if (other.getEncyptedGroupKey() != com.google.protobuf.ByteString.EMPTY) {
          setEncyptedGroupKey(other.getEncyptedGroupKey());
        }
        if (other.getSignature() != com.google.protobuf.ByteString.EMPTY) {
          setSignature(other.getSignature());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        NormalKeyParams parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (NormalKeyParams) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.ByteString encyptedGroupKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       *加密后的群密码
       * </pre>
       *
       * <code>bytes encyptedGroupKey = 1;</code>
       */
      public com.google.protobuf.ByteString getEncyptedGroupKey() {
        return encyptedGroupKey_;
      }
      /**
       * <pre>
       *加密后的群密码
       * </pre>
       *
       * <code>bytes encyptedGroupKey = 1;</code>
       */
      public Builder setEncyptedGroupKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        encyptedGroupKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *加密后的群密码
       * </pre>
       *
       * <code>bytes encyptedGroupKey = 1;</code>
       */
      public Builder clearEncyptedGroupKey() {
        
        encyptedGroupKey_ = getDefaultInstance().getEncyptedGroupKey();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       *sign(群密钥明文, 群密码派生的密钥对的私钥)
       * </pre>
       *
       * <code>bytes signature = 2;</code>
       */
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <pre>
       *sign(群密钥明文, 群密码派生的密钥对的私钥)
       * </pre>
       *
       * <code>bytes signature = 2;</code>
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        signature_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *sign(群密钥明文, 群密码派生的密钥对的私钥)
       * </pre>
       *
       * <code>bytes signature = 2;</code>
       */
      public Builder clearSignature() {
        
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:secure.NormalKeyParams)
    }

    // @@protoc_insertion_point(class_scope:secure.NormalKeyParams)
    private static final NormalKeyParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NormalKeyParams();
    }

    public static NormalKeyParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NormalKeyParams>
        PARSER = new com.google.protobuf.AbstractParser<NormalKeyParams>() {
      public NormalKeyParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new NormalKeyParams(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NormalKeyParams> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<NormalKeyParams> getParserForType() {
      return PARSER;
    }

    public NormalKeyParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_secure_StrongKeyParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_secure_StrongKeyParams_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_secure_NormalKeyParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_secure_NormalKeyParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\030group_key_exchange.proto\022\006secure\"\251\001\n\017S" +
      "trongKeyParams\022\026\n\016signedPrekeyId\030\001 \001(\005\022\020" +
      "\n\010prekeyId\030\002 \001(\005\022\020\n\010aliceUid\030\003 \001(\t\022\025\n\rba" +
      "sePublicKey\030\004 \001(\014\022\026\n\016alicePublickey\030\005 \001(" +
      "\014\022\030\n\020encyptedGroupKey\030\006 \001(\014\022\021\n\tsignature" +
      "\030\007 \001(\014\">\n\017NormalKeyParams\022\030\n\020encyptedGro" +
      "upKey\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014B>\n*com.bc" +
      "m.messenger.chats.group.logic.secureB\020Gr" +
      "oupKeyExchangeb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_secure_StrongKeyParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_secure_StrongKeyParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_secure_StrongKeyParams_descriptor,
        new String[] { "SignedPrekeyId", "PrekeyId", "AliceUid", "BasePublicKey", "AlicePublickey", "EncyptedGroupKey", "Signature", });
    internal_static_secure_NormalKeyParams_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_secure_NormalKeyParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_secure_NormalKeyParams_descriptor,
        new String[] { "EncyptedGroupKey", "Signature", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
